using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using BestHTTP.ServerSentEvents;
using BestHTTP.SignalRCore;
using BestHTTP.SignalRCore.Encoders;
using UnityEngine;

public class SignalRCoreConnect : MonoBehaviour, IMatchMake
{
    public HubConnection _connection;

    public static SignalRCoreConnect instance;

    private void Awake()
    {
        instance = this;
    }

    private async void OnDisable()
    {
        if (_connection != null) await _connection.CloseAsync();
    }

    private async void Start()
    {
        _connection = new HubConnection(new Uri("https://localhost:5001/matchmakerhub")
            , new JsonProtocol(new LitJsonEncoder()), new HubOptions());

        _connection.OnError += Hub_OnError;
        _connection.OnConnected += Hub_OnConnected;
        _connection.OnReconnected += Hub_OnReconnected;
        _connection.OnReconnecting += Hub_OnReconnecting;
        _connection.OnClosed += Hub_OnClosed;
        _connection.OnRedirected += Hub_OnRedirected;
        _connection.OnTransportEvent += Hub_OnTransportEvent;
        _connection.On<int>(nameof(OnClientMatchStarted), OnClientMatchStarted);
        _connection.On(nameof(OnMatchFound), OnMatchFound);

        Debug.Log("Connecting!");
        await _connection.ConnectAsync();
        
        Debug.Log("Connection Complete...");
        if (MultiplayerManager.instance.isServer)
        {
            OnMatchMakingCompleted(ServerSideGameManager.instance.serverPort);
        }
    }

    private void Hub_OnTransportEvent(HubConnection hubConnection, ITransport transport, TransportEvents transportEvents)
    {
        Debug.Log("MessageHub_Hub_OnTransportEvent: " +
                   $"Transport(<color=green>{transport.TransportType}</color>) " +
                   $"event: <color=green>{transportEvents}</color>"
        );
    }
    private void Hub_OnRedirected(HubConnection hubConnection, Uri uri1, Uri uri2)
    {
        Debug.Log("MessageHub_Hub_OnRedirected: " +
                   $"Hub_OnRedirected Called. Uri1 = {uri1}, Uri2 = {uri2}");
    }
    private bool Hub_OnMessage(HubConnection hubConnection, Message message)
    {
        Debug.Log("MessageHub_Hub_OnMessage: " +
                   $"Hub's OnMessage Called: Message received: {message}");

        // When returning false, no further processing is done by the plugin..
        return false;
    }
    private void Hub_OnClosed(HubConnection hubConnection)
    {
        Debug.Log("MessageHub_Hub_OnClosed: " +
                   "HubConnection is Closed!");
    }
    private void Hub_OnReconnecting(HubConnection hub, string message)
    {
        Debug.Log("MessageHub_Hub_OnReconnecting: " +
                   "Hub is Reconnecting!.. Message: " + message);
    }
    private void Hub_OnReconnected(HubConnection hubConnection)
    {
        Debug.Log("MessageHub_Hub_OnReconnected: " +
                   "Hub Reconnected!");
    }
    private void Hub_OnConnected(HubConnection hubConnection)
    {
        Debug.Log("MessageHub_Hub_OnConnected: " +
                   "Hub Connected! ");
    }
    public void Hub_OnError(HubConnection hubConnection, string error)
    {
        Debug.Log("MessageHub_Hub_OnError: " +
                   $"The HubConnection has an Error: {error}");
    }

    public async Task OnMatchMakingCompleted(int matchId)
    {
        await SendAsyncData("OnMatchMakingCompleted", matchId, null);
    }

    public void OnClientMatchStarted(int matchId)
    {
        Debug.Log("OnClientMatchStarted "+ matchId);
        MultiplayerManager.instance.OnMatchBegin(matchId);
    }

    public void OnMatchFound()
    {
        Debug.Log("Match Found");
    }

    public async Task LeaveMatch(int matchId)
    {
        await SendAsyncData("LeaveMatch",matchId,null);
    }

    public async Task OnMatchEnded(int matchId)
    {
        await SendAsyncData("OnMatchEnded",matchId, null);
    }

    public async Task OnMatchAborted(int matchId)
    {
        await SendAsyncData("OnMatchAborted",matchId, null);
    }
    public async Task JoinQueue()
    {
        await SendAsyncData("JoinQueue", JoinQueueSentSuccess);
    }

    public async Task LeaveQueue()
    {
        await SendAsyncData("LeaveQueue", LeaveQueueSentSuccess);
    }

    public void JoinQueueSentSuccess()
    {
        MultiplayerManager.instance.DestroyJoinQueueRef();
        MultiplayerManager.instance.InitiliseFindMatchScreen();
    }

    public void LeaveQueueSentSuccess()
    {
        MultiplayerManager.instance.DestroyFindMatchScreen();
        MultiplayerManager.instance.InitiliseJoinMatchScreen();
    }

    public async Task SendAsyncData(string method,OnWorkDone onComplete)
    {
        Debug.Log("SendAsync "+method);
        Loader loader=null;
        if (!MultiplayerManager.instance.isServer)
        {
            loader = Instantiate(MultiplayerManager.instance.loader, MultiplayerManager.instance.Canvas, false);
            loader.StartLoading();
        }
        
        try
        {
            if (await _connection.InvokeAsync<bool>(method))
            {
                Debug.Log("Done Success");
                if (!MultiplayerManager.instance.isServer)
                {
                    onComplete?.Invoke();
                    if (loader != null)
                    {
                        loader.SetMessage(method + " success!");
                        loader.transform.SetAsLastSibling();
                    }
                }
            }
            else
            {
                Debug.Log("Done Failure");
                if (loader != null)
                {
                    loader.SetMessage(method + " failure!");
                    loader.transform.SetAsLastSibling();
                }
            }
            
        }
        catch (TaskCanceledException ex)
        {
            Debug.LogError("ex" + ex);
        }
    }

    public async Task SendAsyncData<T>(string method, T data,OnWorkDone onComplete)
    {
        Debug.Log("SendAsync " + method);
        Loader loader = null;
        if (!MultiplayerManager.instance.isServer)
        {
            loader = Instantiate(MultiplayerManager.instance.loader, MultiplayerManager.instance.Canvas, false);
            loader.StartLoading();
        }

        try
        {
            if (await _connection.InvokeAsync<bool>(method, data))
            {
                Debug.Log("Done Success");
                if (!MultiplayerManager.instance.isServer)
                {
                    onComplete?.Invoke();
                    if (loader != null)
                    {
                        loader.SetMessage(method + " success!");
                        loader.transform.SetAsLastSibling();
                    }
                }
            }
            else
            {
                Debug.Log("Done Failure");
                if (loader != null)
                {
                    loader.SetMessage(method + " failure!");
                    loader.transform.SetAsLastSibling();
                }
            }

        }
        catch (TaskCanceledException ex)
        {
            Debug.LogError("ex" + ex);
        }
    }
}

